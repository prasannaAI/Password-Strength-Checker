import Head from 'next/head'
import { useEffect, useState } from "react";
import calculatePasswordStrength from "@/utils/crackTime";
import { ZxcvbnResult } from "@zxcvbn-ts/core";
import LockIcon from '@mui/icons-material/Lock';
import RemoveRedEyeIcon from '@mui/icons-material/RemoveRedEye';
import DoneIcon from '@mui/icons-material/Done';

const HomePage = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [result, setResult] = useState<ZxcvbnResult | null>(null);

  const [passwordVisible, setPasswordVisible] = useState(true);

  const [containsLowercase, setContainsLowercase] = useState(false);
  const [containsUppercase, setContainsUppercase] = useState(false);
  const [containsNumber, setContainsNumber] = useState(false);
  const [containsSymbol, setContainsSymbol] = useState(false);
  // const [isPasswordvalid, setIsPasswordvalid] = useState(false);


  const checkValidity = (input: string): boolean => {
    const valid = input.length >= 8 && /[A-Z]/.test(input) && /[\W_]/.test(input) && /[a-z]/.test(input);
    return valid;
  }
  const lowercase = (input: string): boolean => {
    const lowercaseRegex = /[a-z]/;
    return lowercaseRegex.test(input);
  }

  const checkUppercase = (input: string): boolean => {
    const uppercaseRegex = /[A-Z]/;
    return uppercaseRegex.test(input);
  }

  const checkNumber = (input: string): boolean => {
    const NumberRegex = /\d/;
    return NumberRegex.test(input);
  }

  const checkSymbols = (input: string): boolean => {
    const SymbolRegex = /[!@#$%^&*(),.?":{}|<>]/;
    return SymbolRegex.test(input);
  }

  useEffect(() => {
    if (searchTerm?.length > 0) {
      calculatePasswordStrength(searchTerm).then((r) => {
        setResult(r);
        setContainsUppercase(/[A-Z]/.test(searchTerm));
        setContainsLowercase(/[a-z]/.test(searchTerm));
        setContainsNumber(/\d/.test(searchTerm));
        setContainsSymbol(/[!@#$%^&*(),.?":{}|<>+=]/.test(searchTerm));
      });
    }
  }, [searchTerm]);


  const getColor = (segment: number): string => {
    if (!result) return "transparent";
    const scoreFraction = result.score / 4;
    if (segment <= scoreFraction * 9) {
      if (scoreFraction <= 0.25) return "red";
      else if (scoreFraction <= 0.5) return "#f59642";
      else if (scoreFraction <= 0.75) return "#f57842";
      else return "green";
    } else {
      return "transparent";
    }
  };


  const togglePasswordVisibility = () => {
    setPasswordVisible(!passwordVisible);
  }
  const getPasswordInputType = () => {
    return passwordVisible ? 'password' : 'text';
    return passwordVisible ? 'password' : 'text';
  }





    return (
        <>
          <Head>
            <title>Password Strength Checker</title>
            <meta name="description" content="Generated by create next app"/>
            <meta name="viewport" content="width=device-width, initial-scale=1"/>
            <link rel="icon" href="/favicon.ico"/>
          </Head>
          <body>

          <header className="bg-[#273441] w-full h-[4rem]">
            <p>
              traboda
            </p>
          </header>

          <main>
            <div className="  w-[80%] m-auto mt-[70px] mb-[30px] ">
              <div>
                <p className="text-center  text-[3rem] text-[#273441] font-extrabold text-[3.5rem] ">
                  HOW SECURE IS YOUR PASSWORD ?
                </p>
                <p className="text-center text-[1.5rem] ">
                  check your password strength here
                </p>

              </div>
              <div className="flex place-content-center mt-[3rem] relative  ">
                <div className="border-black border-b-2 ">

                </div>
                <div>
                <LockIcon className="opacity-[0.2] "
                          style={{width: "34px", height: "48px"}}/>
                </div>
                <input className=" pl-[1rem] border-black border-b-2 "
                       style={{width: "45%", height: "3rem", outline: "none"}}
                       type={getPasswordInputType()}
                       placeholder="Enter Your Password"
                       value={searchTerm}
                       onChange={(e) => setSearchTerm(e.target.value)}


                />

                <RemoveRedEyeIcon className="opacity-[0.2] "
                                  style={{width: "34px", height: "48px", paddingRight: "0.5rem", cursor: "pointer"}}
                                  onClick={togglePasswordVisibility}
                />

              </div>
              <div className='w-[49.5%] m-auto h-4  rounded-[1rem]  p-[0.25rem] overflow-hidden '>
                {result && (
                    <div className="collar-bar " style={{width: '100%'}}>
                      {[...Array(9)].map((_, i) => (
                          <div key={i} className="bar-segment" style={{backgroundColor: getColor(i + 1)}}></div>
                      ))}
                    </div>
                )}
              </div>


              {/*characters present in the string and password validation */}
              <div className=' w-[51%] m-auto mt-[10px] grid grid-cols-[3fr_repeat(4,1fr)] gap-[50px]'>
                <div>
                  <p className=" text-[14px]">Characters Present {searchTerm.length}</p>
                </div>
                <div className="grid grid-cols-2 inline">
                  <div>
                    {containsLowercase && (
                        <div>
                          <DoneIcon style={{position: "absolute", color: "green"}}/>
                        </div>)}
                  </div>
                  <div>
                    <p style={{fontSize: "12px", position: "relative", top: "2px"}}>Lowercase</p>
                  </div>
                </div>

                <div className="grid grid-cols-2 inline">
                  <div>
                    {containsUppercase && (
                        <div>
                          <DoneIcon style={{position: "absolute", color: "green"}}/>
                        </div>)}
                  </div>
                  <div>
                    <p style={{fontSize: "12px", position: "relative", top: "2px"}}>Uppercase</p>
                  </div>
                </div>

                <div className="grid grid-cols-2 inline">
                  <div>
                    {containsNumber && (
                        <div>
                          <DoneIcon style={{position: "absolute", color: "green"}}/>
                        </div>)}
                  </div>
                  <div>
                    <p style={{fontSize: "12px", position: "relative", top: "2px"}}>Number</p>
                  </div>
                </div>

                <div className="grid grid-cols-2 inline relative right-[18px]">
                  <div>
                    {containsSymbol && (
                        <div>
                          <DoneIcon style={{position: "absolute", color: "green"}}/>
                        </div>)}
                  </div>
                  <div>
                    <p style={{fontSize: "12px", position: "relative", top: "2px"}}>Symbol</p>
                  </div>
                </div>

              </div>

              {/*cracktime display*/}


              {result && (
                  <div className="  w-[80%] m-auto mt-[70px] mb-[30px] ">

                    <div className="text-center  text-[#273441]">

                      <p>
                        It would a computer about
                      </p>
                    </div>
                    <div
                        className=" border border-2 border-black rounded-md w-[40%] m-auto text-center bg-[#ECF9FF]">
                      <p style={{margin: "16px", fontSize: "1.8rem"}}>


                        {result && result.score <= 0 ? (
                            <>
                              <h2> 0 seconds</h2>
                            </>
                        ) : (
                            <>

                              <h1> {[...Array(9)].map((_, i) => (
                                  <div key={i} style={{backgroundColor: getColor(i + 1)}}></div>
                              ))}
                                <div style={{color: getColor(1)}}>
                                  {result?.crackTimesDisplay.offlineSlowHashing1e4PerSecond}
                                </div>
                              </h1>
                            </>
                        )
                        }
                      </p>

                    </div>
                    <div>
                      <p className="text-center font-bold  text-[#273441] ">
                        to crack your password
                      </p>
                    </div>


                  </div>)}

              {result && (
              <div className='flex place-content-center m-auto mt-[3rem] w-[80%] '>
                <div className='grid grid-rows-[2fr_repeat(3, minmax(0, 1fr))] border border-2 border-black'>
                  <div className='border border-b-[2px] border-black p-[1rem] inline'>
                    <div className='text-[1.3rem] inline mr-1'>
                      üõ°Ô∏è
                    </div>
                    <p className='inline pb-[-1rem]'>
                      Tips to Increase Your Privacy and Security on the Internet
                    </p>
                  </div>
                  <div className='border border-b-[2px] border-black p-[1rem] inline'>
                    {result && result.feedback.suggestions ?
                        (<>
                    <strong>
                      Suggestions:
                    </strong>
                    <p className='block mt-[0.5rem]'>
                      {result?.feedback.suggestions[1]} <br />
                      {result?.feedback.suggestions[0]}
                    </p>
                        </>
                      ):(
                          <>
                          <p>
                        no suggestions
                        </p>
                        </>
                      )
                    }
                  </div>
                  <div className='border border-b-[2px] border-black p-[1rem] inline'>
                    <strong>
                      Warnings:
                    </strong>
                    <p className='mt-[0.5rem]'>
                      {result?.feedback.warning}
                    </p>
                  </div>
                  <div className='border border-b-[2px] border-black p-[1rem] inline'>
                    <p>
                      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Explicabo ut harum asperiores inventore placeat adipisci totam labore, porro quia animi eos quos perferendis aperiam sed laudantium error, ullam laboriosam maxime!
                    </p>
                  </div>
                </div>
              </div>)}


            </div>


          </main>

          <style jsx>{`
            .collar-bar {
              display: flex;
              justify-content: space-between;
              width: 100%;
              height: 4px;
              background-color: #a7b9c66e;
              gap: 10px;
              align-items: center;
              margin: 2rem;
              overflow: hidden;
              border-radius: 1rem;

            }


            .bar-segment {
              width: 50%;
              height: 100%;
              border-radius: 1rem;
              overflow: hidden;
            }

            input:focus ~ .collar-bar {
              opacity: 1;
              transition: opacity 0.3s ease-in-out;
            }

            input:not(:focus) ~ .collar-bar {
              opacity: 0;
              transition: opacity 0.3s ease-in-out;
            }

          `}</style>

          </body>
        </>
    )
  };


export default HomePage;